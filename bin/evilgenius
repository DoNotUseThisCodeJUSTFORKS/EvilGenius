#!/usr/bin/env python

import os
import sys

# Hack to set the proper sys.path. Overcomes the export PYTHONPATH pain.
sys.path[:] = map(os.path.abspath, sys.path)
sys.path.insert(0, os.path.abspath(os.getcwd()))

from evilgenius.resources import CensorshipProvider, NetworkMeasurementInstrument, EvilGeniusResources
from evilgenius.vagrant import VagrantController, NetworkTopology

import logging

if __name__ == "__main__":
    try:
        import argparse
    except ImportError:
        print "[!] Error! Evil Genius requires argparse."
        print ""
        print "argparse is found in python >= 2.7."
        print "If you do not wish to update to a modern version of python " \
              "you must manually install the argparse module."

    parser = argparse.ArgumentParser()
    parser.add_argument("--network-measurement", "-n",
                        help="Run the specified network measurement instruments",
                        action='append')
    parser.add_argument("--censorship-providers", "-c",
                        help="Run the network measurement with the specified censorship providers",
                        action='append')
    parser.add_argument("--list", "-l", action="store_true",
                        help="List all available network measurement instruments and censorship providers")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="increase output verbosity")

    args =  parser.parse_args()

    # initialize logging
    if args.verbose:
        loglevel = logging.DEBUG
    else:
        loglevel = logging.ERROR

    logging.basicConfig(format="[%(levelname)s]: %(message)s",
                        level=loglevel)
    logging.info('ohai, this is evilgenius.')

    if args.list:
        evil_genius_resources = EvilGeniusResources()
        evil_genius_resources.list_censorship_providers()
        evil_genius_resources.list_network_measurement_instruments()
    elif args.censorship_providers and args.network_measurement:
        ## prepare network

        # initalize a temporary directory
        import tempfile
        tmp = tempfile.mkdtemp()

        # initialize VagrantController
        controller = VagrantController(root=tmp)

        # create instruments and providers, if one of them is not available,
        # notify user
        censorship_providers = []
        for c in args.censorship_providers:
            try:
                provider_path = "resources/censorship-providers/{name}/{name}.yml".format(name=c)
                c = CensorshipProvider(controller=controller, descriptor_path=provider_path)
                censorship_providers.append(c)
            except IOError, e:
                logging.error("Provider {filename} not found".format(filename=e.filename))
                sys.exit(1)

        network_measurement_instruments = []
        for n in args.network_measurement:
            try:
                provider_path = "resources/network-measurement-instruments/{name}/{name}.yml".format(name=n)
                n = NetworkMeasurementInstrument(controller=controller, descriptor_path=provider_path)
                network_measurement_instruments.append(n)
            except IOError, e:
                logging.error("Instrument {filename} not found".format(filename=e.filename))
                sys.exit(1)

        # mash them together in a network Topology
        network = NetworkTopology()
        network.censorship_providers = censorship_providers
        network.network_measurement_instruments = network_measurement_instruments

        print network.vagrantfile.content

        # write out the Vagrantfile

        # Pull that sh*t up

        # iterate over instruments

        # save output

        # tear that sh*t down

        # present results to user
        pass
    else:
        parser.print_help()
